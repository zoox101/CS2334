import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * 
 * @author CS2334. Modified by: Will Booker, David Jones
 *         <P>
 *         Date: 2015-09-28 <BR>
 *         Project 3
 *         <P>
 *         This class is responsible for interacting with the user to identify
 *         the station and variable of interest, and to report the minimum,
 *         maximum and average statistics for the variable.
 * 
 */
public class UserQuery {
	/**
	 * Query the user for a stationID.
	 * <P>
	 * First prints out the list of stations (sorted by station IDs). Then,
	 * prompts the user for input.
	 * 
	 * @param br
	 *            BufferedReader from which input is received
	 * @param stationList
	 *            The set of stations, one of which may be selected.
	 * @return String station ID that has been selected
	 * @throws IOException
	 *             If an error occurs when reading from the BufferedReader
	 * @throws UserQueryException
	 *             If the user indicates that s/he is done with the interaction
	 */
	public static String stationMenu(BufferedReader br, StationInfoList stationList)
			throws IOException, UserQueryException {
		// FIXED: complete implementation
		System.out.printf("%-12s %-25s %s", "Station ID", "Name", "City\n");
		System.out.printf("%-12s %-25s %s", "__________", "____", "____\n");

		// FIXED: print out the whole list of stationInfos
		//retrieve all the keys of stationMap and store them in an array
		ArrayList<String> keySetArray = stationList.getStationIds();
		
		//use the keys to access StationInfo objects and print the formatted info
		for (String key : keySetArray) {
			System.out.println(stationList.getStationInfo(key).getFormattedString());
		}
		return selectString(br, "Please choose a station (or \"END\" to quit):\n", keySetArray);
	}

	/**
	 * Query the user for a variable ID.
	 * <P>
	 * First prints out the list of variables (sorted by variable IDs). Then,
	 * prompts the user for input.
	 * 
	 * @param br
	 *            BufferedReader from which input is received
	 * @param dataInfoList
	 *            The set of variables, one of which may be selected.
	 * @return String variable ID that has been selected
	 * @throws IOException
	 *             If an error occurs when reading from the BufferedReader
	 * @throws UserQueryException
	 *             If the user indicates that s/he is done with the interaction
	 */
	public static String variableMenu(BufferedReader br, DataInfoList dataInfoList)
			throws IOException, UserQueryException {
		// FIXED: complete implementation
		
		System.out.printf("%-12s %-25s %s", "Variable ID", "Name", "Units\n");
		System.out.printf("%-12s %-25s %s", "___________", "____", "_____\n");
		
		// FIXED: print out the whole list of stationInfos
		//retrieve all the keys of dataInfoMap and store them in an array
		ArrayList<String> keySetArray = dataInfoList.getVariableIds();
		
		//use the keys to access DataInfo objects and print the formatted info
		for (String key: keySetArray) {
			System.out.println(dataInfoList.getDataInfo(key).getFormattedString());
		}
		return selectString(br, "Please choose a variable (or \"END\" to quit):\n", keySetArray);

	}

	/**
	 * Prompts the user for a string input. If the string matches a list of
	 * acceptable inputs, then the string is returned. If not, then the user is
	 * reprompted until a valid value is typed.
	 * 
	 * Notes:
	 * <UL>
	 * <LI>Assume that the list of acceptable values is composed of uppercase
	 * letters only
	 * <LI>The returned value must be uppercased
	 * <LI>If the user types "END", then an exception is generated
	 * </UL>
	 * 
	 * @param br
	 *            BufferedReader attached to the user's console
	 * @param prompt
	 *            String prompt used to ask for input from the user
	 * @param strings
	 *            The ArrayList of acceptable input strings
	 * @return The typed string
	 * @throws IOException
	 *             If an error occurs in reading input from the user
	 * @throws UserQueryException
	 *             If "END" is typed.
	 */
	public static String selectString(BufferedReader br, String prompt, ArrayList<String> strings)
			throws IOException, UserQueryException {
		String strg;
		// FIXED: complete implementation
		strg = "";
	
		boolean validInput = false;
		while (!validInput) {
			System.out.print(prompt);
			strg = br.readLine().trim().toUpperCase();
			if (strings.contains(strg)) {
				validInput = true;
			} else if (strg.equals("END")) {
				throw new UserQueryException("Ending program.");
			}
		}
	
		// Valid value received
		return strg;
	
	}

	/**
	 * Query the user for a station(s) and year(s), create a corresponding data
	 * set and print out the high-level statistics for the data set.
	 * 
	 * @param args
	 *            Not used
	 * @throws IOException
	 *             If an error occurs when reading from the BufferedReader
	 */
	public static void main(String[] args) throws IOException {
		// Load the station information
		StationInfoList stationList = new StationInfoList("data/geoinfo.csv");
		// Load the variable information
		DataInfoList dataInfoList = new DataInfoList("data/DataTranslation.csv");

		// Hand the DailyData class the dataInfoList
		DailyData.setDataInfoList(dataInfoList);

		// Load the data
		stationList.loadData("data/allData1994_2000.csv");

		// Open the stream from System.in
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		try {
			// Loop over multiple queries
			while (true) {
				System.out.println("####################################################");
				// Query the user for the set of stationIds
				String stationId = stationMenu(br, stationList);

				// Query the user for the variable Id
				String variableId = variableMenu(br, dataInfoList);

				// Full description of the variable
				DataInfo dataInfo = dataInfoList.getDataInfo(variableId);

				// Report what was selected
				System.out.println("Station: " + stationList.getStationInfo(stationId));
				System.out.println("Variable: " + dataInfoList.getDataInfo(variableId));

				// Request and report the statistics
				// Average
				Observation average = stationList.getAverageStat(stationId, variableId);
				if (average.getValid()) {
					System.out.println("Average: " + average + " " + dataInfo.getUnit());
				} else {
					System.out.println("Average: " + average);
				}

				// Minimum and Maximum
				// Get the statistics
				DailyData minDay = stationList.getMinimumStat(stationId, variableId);
				DailyData maxDay = stationList.getMaximumStat(stationId, variableId);
				// Do these statistics exist?
				if (maxDay != null) {
					// Valid
					// Max statistic
					Observation max = maxDay.getAverageStat(variableId);
					System.out.print("Maximum: " + maxDay.getAverageStat(variableId));
					if (max.getValid()) {
						System.out.print(" " + dataInfo.getUnit() + " on " + maxDay.getDate());
					}
					System.out.println("");

					// Min statistic
					Observation min = minDay.getAverageStat(variableId);

					System.out.print("Minimum: " + min);
					if (min.getValid()) {
						System.out.print(" " + dataInfo.getUnit() + " on " + minDay.getDate());
					}
					System.out.println("");
				} else {
					// Not valid
					System.out.println("There are no valid measurements.");
				}

				// Wait for the user to hit ENTER
				System.out.println("Hit <ENTER> to continue");
				br.readLine();
				System.out.println("Done..");
			}
		} catch (UserQueryException e) {
			// User has requested that the program halt.
			System.out.println("Done..");
		}
	}
}
