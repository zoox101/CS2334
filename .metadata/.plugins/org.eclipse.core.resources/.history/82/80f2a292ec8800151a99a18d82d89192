import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

public class WeatherFrame extends JFrame {

	/** Menu that will allow the user to load in a data file */
	private FileMenuBar fileMenuBar;
	/** Panel containing the stations and variables that the user can select */
	private SelectionPanel selectionPanel;
	/** Panel containing text boxes that will output most of the data */
	private DataPanel dataPanel;
	/** A list of stations that there will be statistics available for */
	private StationInfoList stationInfoList;
	/** A list to be loaded in containing all the Mesonet variables */
	private DataInfoList dataInfoList;

	/**
	 * Constructor
	 * 
	 * @throws IOException
	 * @throws FileNotFoundException
	 */
	public WeatherFrame() throws FileNotFoundException, IOException {
		// TODO: All of the frame properties are subject to change
		setSize(1000, 600);
		setResizable(true);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		// initialize all of the components
		fileMenuBar = new FileMenuBar();

		// TODO: create the stationInfoList and dataInfoList by reading the
		// files
		stationInfoList = new StationInfoList("data/geoinfo.csv");
		dataInfoList = new DataInfoList("data/DataTranslation.csv");

		// pass the station and data info list to the constructor of selection
		// panel
		selectionPanel = new SelectionPanel(stationInfoList, dataInfoList);
		dataPanel = new DataPanel();

		// TODO: Determine the layout of the components (subject to change)
		this.setJMenuBar(fileMenuBar);

		GridLayout layout = new GridLayout(1, 2);
		this.setLayout(layout);
		add(selectionPanel);
		add(dataPanel);

		// leave setVisible to the last
		setVisible(true);
	}
}

/**
 * 
 * @author CS2334. Modified by: Will Booker, David Jones
 *         <P>
 *         Date: 2015-11-06 <BR>
 *         Project 4
 *         <P>
 *         This class represents a menu bar that can open a file and then
 *         populate a list of years according to how many there are in the
 *         Mesonet data file.
 */

// TODO: complete implementation
class FileMenuBar extends JMenuBar {

	/** The menu itself */
	private JMenu menu;
	/** The file opener menu item */
	private JMenuItem menuOpen;
	/** The exit program menu item */
	private JMenuItem menuExit;
	/** The file chooser that opens when menuOpen is clicked */
	private JFileChooser fileChooser;

	/**
	 * Constructor
	 */
	public FileMenuBar() {
		// TODO: set display properties

		// initialize fields
		menu = new JMenu("File");
		menuOpen = new JMenuItem("Open Data File");
		menuExit = new JMenuItem("Exit");
		fileChooser = new JFileChooser(new File("./data"));

		// configure fileChooser
		fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));

		// add action listeners to the menu items
		menuOpen.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				int returnValue = fileChooser.showOpenDialog(FileMenuBar.this);
				if (returnValue == 0) {
					// TODO If the user hits open, Load the selected file using
					// JFileChooser
				} else if (returnValue == 1) {
					// don't do anything
				}
			}

		});

		menuExit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});

		// add the menu items to the menu
		menu.add(menuOpen);
		menu.add(menuExit);

		this.add(menu);
	}
}




/**
 * 
 * @author CS2334. Modified by: Will Booker, David Jones
 *         <P>
 *         Date: 2015-11-06 <BR>
 *         Project 4
 *         <P>
 *         This class represents a panel containing the variables that the user
 *         will select, including the station, variable, and year(s). It should
 *         be possible for a user to select multiple years.
 */

// TODO: complete implementation
class SelectionPanel extends JPanel {

	/** List containing the list station IDs */
	private JList<String> stationList;
	/** List containing all of the variables */
	private JList<String> variableList;
	/** List containing all the years in a data file */
	private JList<String> yearList;
	/** Models the year list. Used in the yearList constructor */
	private DefaultListModel<String> yearListModel;
	/** Array list containing int values of the data file's years */
	private ArrayList<Integer> yearListValues;

	/** Scroll pane for navigating the station list */
	private JScrollPane stationListScroller;
	/** Scroll pane for navigating the variable list */
	private JScrollPane variableListScroller;
	/** Scroll pane for navigating the year list */
	private JScrollPane yearListScroller;

	/** Label next to the station list */
	private JLabel stationLabel;
	/** Label next to the variable list */
	private JLabel variableLabel;
	/** Label next to the year list */
	private JLabel yearListLabel;

	/**
	 * Constructor
	 * 
	 * @throws IOException
	 * @throws FileNotFoundException
	 */
	public SelectionPanel(StationInfoList stations, DataInfoList variables) throws FileNotFoundException, IOException {
		// TODO: set display properties of this panel
		this.setBackground(new Color(0, 200, 0, 30));

		// initialize the labels
		stationLabel = new JLabel("Select Station:");
		variableLabel = new JLabel("Select Variable:");
		yearListLabel = new JLabel("Select Year(s):");

		//create and populate the JList using the stations and variables lists
		populateStationList(stations);
		populateVariableList(variables);
		
		//set some of the properties of stationList
		stationList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
		stationList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		stationList.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent event) {
				// TODO Auto-generated method stub

			}

		});
		
		//set some of the properties of variableList
		variableList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
		variableList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		variableList.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub

			}

		});

		// TODO: define yearListModel

		// TODO: determine the best way to load in the years from FileMenuBar,
		// and populate the list and yearListValues accordingly
		yearList = new JList<String>();
		yearList.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
			}

		});

		// TODO: see if there is a way to make the scroll pane vertical, not
		// horizontal (low priority)
		Dimension scrollPaneDim = new Dimension(250, 150);
		stationListScroller = new JScrollPane(stationList);
		stationListScroller.setMinimumSize(scrollPaneDim);
		variableListScroller = new JScrollPane(variableList);
		variableListScroller.setMinimumSize(scrollPaneDim);
		yearListScroller = new JScrollPane(yearList);
		yearListScroller.setMinimumSize(scrollPaneDim);

		// TODO: determine layout of this label component (subject to change)
		GridBagLayout layout = new GridBagLayout();
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new Insets(10, 10, 10, 10);
		this.setLayout(layout);

		c.gridx = 0;
		c.gridy = 0;
		add(stationLabel, c);

		c.gridx = 1;
		c.gridy = 0;
		add(stationListScroller, c);

		c.gridx = 0;
		c.gridy = 1;
		add(variableLabel, c);

		c.gridx = 1;
		c.gridy = 1;
		add(variableListScroller, c);

		c.gridx = 0;
		c.gridy = 2;
		add(yearListLabel, c);

		c.gridx = 1;
		c.gridy = 2;
		add(yearListScroller, c);
	}

	/**
	 * This method, called by the constructor, takes the station ID field from
	 * every StationInfo in the StationInfoList, puts it into an array, and then
	 * populates the JList using this array
	 * 
	 * @param stations
	 *            The list from which the Station IDs will come
	 */
	private void populateStationList(StationInfoList stations) {
		// DONE: complete implementation
		String[] stationArray = stations.getStationIds().toArray(new String[stations.getStationIds().size()]);
		stationList = new JList<String>(stationArray);
	}

	/**
	 * This method, called by the constructor, takes the variable ID field from
	 * every DataInfo in the DataInfoList, puts it into an array, and then
	 * populates the JList using this array
	 * 
	 * @param variables
	 *            The list from which the variable IDs will come
	 */
	private void populateVariableList(DataInfoList variables) {
		// DONE: complete implementation
		String[] variableArray = variables.getVariableIds()
				.toArray(new String[variables.getVariableIds().size()]);
		variableList = new JList<String>(variableArray);
	}
}

